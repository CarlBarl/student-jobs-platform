// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  passwordHash      String
  firstName         String?
  lastName          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastLoginAt       DateTime?
  isActive          Boolean   @default(true)
  verificationToken String?
  
  // User preferences
  preferences       Json?
  
  // Relations
  profile           Profile?
  bookmarks         Bookmark[]
  searchHistory     SearchHistory[]
  
  @@map("users")
}

// User profile
model Profile {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  educationAreaId   Int?
  educationArea     EducationArea? @relation(fields: [educationAreaId], references: [id])
  bio               String?
  phone             String?
  linkedInUrl       String?
  githubUrl         String?
  portfolioUrl      String?
  notificationPrefs Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@map("profiles")
}

// Job model
model Job {
  id                    Int       @id @default(autoincrement())
  externalId            String
  source                String
  sourceUrl             String
  title                 String
  description           String    @db.Text
  descriptionFormatted  String?   @db.Text
  
  // Relations
  companyId             Int
  company               Company   @relation(fields: [companyId], references: [id])
  locationId            Int?
  location              Location? @relation(fields: [locationId], references: [id])
  
  // Application details
  applicationEmail      String?
  applicationUrl        String?
  applicationReference  String?
  applicationInformation String?  @db.Text
  applicationDeadline   DateTime?
  
  // Job details
  employmentType        String?
  workingHoursType      String?
  duration              String?
  salary                String?
  
  // Dates
  publishedAt           DateTime
  updatedAt             DateTime  @updatedAt
  expiresAt             DateTime?
  
  // Metadata
  metaData              Json?
  studentRelevanceScore Float     @default(0)
  qualityScore          Float     @default(0)
  
  // Collection metadata
  collectedAt           DateTime  @default(now())
  lastCollectionSuccess Boolean   @default(true)
  collectionErrors      Json?
  
  // Relations
  skills                JobSkill[]
  educationRequirements JobEducationRequirement[]
  languages             JobLanguage[]
  bookmarks             Bookmark[]
  
  @@unique([externalId, source])
  @@index([publishedAt])
  @@index([locationId])
  @@index([studentRelevanceScore])
  @@index([qualityScore])
  @@map("jobs")
}

// Company model
model Company {
  id                  Int       @id @default(autoincrement())
  name                String
  website             String?
  email               String?
  phone               String?
  organizationNumber  String?
  logoUrl             String?
  verified            Boolean   @default(false)
  
  // Relations
  jobs                Job[]
  
  @@unique([name])
  @@map("companies")
}

// Location model
model Location {
  id          Int       @id @default(autoincrement())
  city        String?
  municipality String?
  region      String?
  country     String    @default("Sweden")
  address     String?
  postalCode  String?
  latitude    Float?
  longitude   Float?
  
  // Relations
  jobs        Job[]
  
  @@index([city])
  @@index([municipality])
  @@index([region])
  @@map("locations")
}

// Education Area model
model EducationArea {
  id                  Int       @id @default(autoincrement())
  name                String    @unique
  parentId            Int?
  parent              EducationArea? @relation("EducationAreaHierarchy", fields: [parentId], references: [id])
  children            EducationArea[] @relation("EducationAreaHierarchy")
  level               String?
  
  // Relations
  profiles            Profile[]
  jobRequirements     JobEducationRequirement[]
  
  @@map("education_areas")
}

// Skill model
model Skill {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  category    String?
  
  // Relations
  jobs        JobSkill[]
  
  @@map("skills")
}

// Language model
model Language {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  
  // Relations
  jobs        JobLanguage[]
  
  @@map("languages")
}

// Job-Skill relation
model JobSkill {
  jobId       Int
  skillId     Int
  required    Boolean   @default(false)
  
  // Relations
  job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  skill       Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)
  
  @@id([jobId, skillId])
  @@map("job_skills")
}

// Job-Education relation
model JobEducationRequirement {
  jobId           Int
  educationAreaId Int
  required        Boolean   @default(false)
  
  // Relations
  job             Job           @relation(fields: [jobId], references: [id], onDelete: Cascade)
  educationArea   EducationArea @relation(fields: [educationAreaId], references: [id], onDelete: Cascade)
  
  @@id([jobId, educationAreaId])
  @@map("job_education_requirements")
}

// Job-Language relation
model JobLanguage {
  jobId       Int
  languageId  Int
  level       String?
  required    Boolean   @default(false)
  
  // Relations
  job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  language    Language  @relation(fields: [languageId], references: [id], onDelete: Cascade)
  
  @@id([jobId, languageId])
  @@map("job_languages")
}

// Bookmark model
model Bookmark {
  id          Int       @id @default(autoincrement())
  userId      Int
  jobId       Int
  createdAt   DateTime  @default(now())
  notes       String?
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  @@unique([userId, jobId])
  @@map("bookmarks")
}

// Search History model
model SearchHistory {
  id          Int       @id @default(autoincrement())
  userId      Int
  query       String
  filters     Json?
  resultCount Int
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("search_history")
}

// Collection History model
model CollectionHistory {
  id                Int       @id @default(autoincrement())
  sourceId          String
  startedAt         DateTime  @default(now())
  completedAt       DateTime?
  status            String
  jobsCollected     Int       @default(0)
  jobsProcessed     Int       @default(0)
  jobsStored        Int       @default(0)
  validationFailures Int      @default(0)
  errors            Json?
  
  @@index([sourceId])
  @@index([startedAt])
  @@map("collection_history")
}

// Source Change model
model SourceChange {
  id          Int       @id @default(autoincrement())
  sourceId    String
  detectedAt  DateTime  @default(now())
  status      String
  changes     Json?
  resolved    Boolean   @default(false)
  resolvedAt  DateTime?
  notes       String?
  
  @@index([sourceId])
  @@map("source_changes")
}